#!/usr/bin/env python
import sys, os, re, hashlib
from optparse import OptionParser

usage = "usage: %prog -f FILE -o OUTPUT"
parser = OptionParser(usage)
parser.add_option('-c', '--cmd', dest="cmd", help="index | checksum")
parser.add_option('-f', '--file', dest="file", help="file to index")
parser.add_option('-o', '--output', dest="output", help="output path and prefix for index files")
(options, args) = parser.parse_args()
def fail(message):
	print message
	sys.exit(1)
if not (options.cmd):
	parser.print_help()
	print " "
	print "ERROR: cmd, file, output required"
	sys.exit(1)	

def md5_for_file(infile):
	md5 = hashlib.md5()
	with open(infile,'rU') as f: 
		for chunk in iter(lambda: f.read(8192), ''):
			md5.update(chunk)
	return md5.hexdigest()

def indexFasta(infile, outfile):
	# Mbp index
	# MB index
	# record index
	handle = open(infile, "rU")	
	outMbp = open("%s.Mbp.index" % outfile, "w")
	outMB = open("%s.MB.index" % outfile, "w")
	outRec = open("%s.record.index" % outfile, "w")
	
	handle.seek(0, os.SEEK_END)
	file_end = handle.tell()
	handle.seek(0, os.SEEK_SET)

	current = 0
	readbuffer = ""

	mbpBuffer = ""
	mbpPos = 0
	bpcount = 0

	mbBuffer = ""
	mbPos = 0
	
	while handle.tell() < file_end:
		readbuffer += handle.readline()
		match = re.match(r"^(>.*)>", readbuffer, flags=re.DOTALL)
		if match:
			readbuffer = ""
			# record index
			outRec.write("%013d%08d\n" % (current, len(match.group(1))-2))
			handle.seek(current + len(match.group(1)), os.SEEK_SET)
			current = handle.tell()

			# find seq length 
			array = match.group(1).split("\n")
			seqid = array.pop(0)		
			for i in array:
				bpcount += len(i)

			# Mbp index
			mbpBuffer += match.group(1)
			if bpcount > 1000000:
				outMbp.write("%013d%08d\n" % (mbpPos, len(mbpBuffer)-2))
				mbpPos = current
				mbpBuffer = ""
				bpcount = 0

			# MB index	
			mbBuffer += match.group(1)
			if len(mbBuffer) > 1048576:
				outMB.write("%013d%08d\n" % (mbPos, len(mbBuffer)-2))
				mbPos = current
				mbBuffer = ""

	# Write last 
	outRec.write("%013d%08d\n" % (current, len(readbuffer)))
	mbpBuffer += readbuffer
	outMbp.write("%013d%08d\n" % (mbpPos, len(mbpBuffer)))
	mbBuffer += readbuffer	
	outMB.write("%013d%08d\n" % (mbPos, len(mbBuffer)))

	handle.close()
	outMbp.close()
	outMB.close()
	outRec.close()
				 
def main():
	if options.cmd == "index":
		if not (options.file and options.output):
			parser.print_help()
			print " "
			print "ERROR: index requires options -f|--file and -o|--output"
			sys.exit(1)	
		indexFasta(options.file, options.output)
	elif options.cmd == "checksum":
		if not (options.file):
			parser.print_help()
			print " "
			print "ERROR: checksum requires options -f|--file"
			sys.exit(1)	
		sys.stdout.write(md5_for_file(options.file))
	else:
		parser.print_help()
		print " "
		print "ERROR: unknown cmd"
	
if __name__ == "__main__":
	sys.exit(main())
